/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paint;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

/**
 *
 * @author jesus
 */
public class Lienzo extends javax.swing.JPanel {

    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
        formaActiva = 0;
        color = Color.BLACK;
        relleno = false;
        p1 = new Point();
        p2 = new Point();
        lastevt = null;
        vShapes = new ArrayList();
        colores = new ArrayList();
        rellenos = new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        p1.x = evt.getX();
        p1.y = evt.getY();
        lastevt = evt;
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
        p2.x = evt.getX();
        p2.y = evt.getY();
        lastevt = evt;
        this.repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        lastevt = evt;
    }//GEN-LAST:event_formMouseClicked
   
    private int formaActiva; //0 punto, 1 line, 2 elipse, 3 rectangulo
    private Color color;
    private boolean relleno; // true si, false no
    private Point p1,p2;
    private ArrayList<Shape> vShapes;
    private ArrayList<Color> colores;
    private ArrayList<Boolean> rellenos;
    private java.awt.event.MouseEvent lastevt;
    
    /**
    * Método para establecer la herramienta de dibujo actual
    * @param forma será un entero, si es menor a 0 ó mayor a 3 será "punto".
    */
    public void setFormaActiva(int forma){
        if((forma < 0) || (forma > 3))
            this.formaActiva = 0;
        else
            this.formaActiva = forma;
    }
    
    /**
    * Método para obtener la herramienta de dibujo actual
    * @return formaActiva será un entero que indica la herramienta de dibujo actual.
    */
    public int getFormaActiva(){
        return this.formaActiva;
    }
    public void setColor(Color color){
        this.color = color;
    }
    public Color getColor(){
        return this.color;
    }
    public void setRelleno(boolean relleno){
        this.relleno = relleno;
    }
    public boolean getRelleno(){
        return this.relleno;
    }
    public String getEstado(){
        String estado = "Forma:";
        if(formaActiva == 0) estado = estado + "lápiz ";
        if(formaActiva == 1) estado = estado + "línea ";
        if(formaActiva == 2) estado = estado + "elipse ";
        if(formaActiva == 3) estado = estado + "rectángulo ";
        if(relleno) estado = estado + " Modo:relleno ";
        if(!relleno) estado = estado + " Modo:no relleno ";
        estado = estado + " Color:" + color;
        return estado;
    }
    
    @Override
    public void paint(Graphics g){
        super.paint(g); //Hacer lo que el padre y luego ya lo que queramos
        Graphics2D g2d = (Graphics2D)g;
        if(!vShapes.isEmpty()){
            for(int i=0; i<vShapes.size(); i++){
                g2d.setColor(colores.get(i));
                if(rellenos.get(i))
                   g2d.fill(vShapes.get(i));
                else
                    g2d.draw(vShapes.get(i));
            }
        }
        if(p1 != null && p2 != null && lastevt != null){
            g2d.setColor(color);
            colores.add(color);
            Point2D point1 = new Point2D.Float(p1.x,p1.y);
            Point2D point2 = new Point2D.Float(p2.x,p2.y);
            if(this.relleno) rellenos.add(true);
            else rellenos.add(false);
            if(this.formaActiva == 0){
                if(this.relleno){
                    g2d.fillOval(p1.x, p1.y, 10, 10);
                }else{
                    g2d.drawOval(p1.x, p1.y, 10, 10);
                }
            }
            if(this.formaActiva == 1){
                Line2D linea = new Line2D.Float(point1,point2);
                vShapes.add(linea);
                g2d.draw(linea);
            }
            if(this.formaActiva == 2){
                Ellipse2D elipse = new Ellipse2D.Double(p1.x, p2.y, 1, 1);
                elipse.setFrameFromDiagonal(point1, point2);
                vShapes.add(elipse);
                if(this.relleno){
                   g2d.fill(elipse);
                }else{
                   g2d.draw(elipse);
                }
            }
            if(this.formaActiva == 3){
                Rectangle2D rectangulo = new Rectangle2D.Double(p1.x,p1.y,1,1);
                rectangulo.setFrameFromDiagonal(point1, point2);
                vShapes.add(rectangulo);
                if(this.relleno){
                   g2d.fill(rectangulo);
                }else{
                   g2d.draw(rectangulo);
                }
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
